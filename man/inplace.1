.\" $Idaemons: /home/cvs/inplace/inplace.1,v 1.8 2004/04/21 13:25:51 knu Exp $
.\" $Id$
.\"
.Dd November 22, 2012
.Dt INPLACE 1
.Os FreeBSD
.Sh NAME
.Nm inplace
.Nd edits files in-place through given filter commands
.Sh SYNOPSIS
.Nm
.Op Fl DLfinstvz
.Op Fl b Ar suffix
.Fl e Ar commandline
.Op Oo Fl e Ar commandline Oc ...
.Op Ar file ...
.Nm
.Op Fl DLfinstvz
.Op Fl b Ar suffix
.Ar commandline
.Op Ar file ...
.Sh DESCRIPTION
The
.Nm
command is a utility to edit files in-place through given filter
commands preserving the original file attributes.  Mode and ownership
(user and group) are preserved by default, and time (access and
modification) by choice.
.Pp
Inode numbers will change by default, but there is a
.Fl i
option with which given the inode number of each edited file will be
preserved.
.Pp
As for filter commands, a single command may be specified as the first
argument to
.Nm .
To pass many filter commands, specify each followed by the
.Fl e
option.
.Pp
There are some cases where
.Nm
does not replace a file, such as when:
.Bl -enum -offset indent
.It
The original file is not writable (use
.Fl f
to force editing against read-only files)
.It
A filter command fails and exits with a non-zero return code
.It
The resulted output is identical to the original file
.It
The resulted output is empty (use
.Fl z
to accept empty output)
.El 
.Pp
.Sh OPTIONS
The following command line arguments are supported:
.Pp
.Bl -tag -width "--preserve-timestamp" -compact
.It Fl h
.It Fl -help
Show help and exit.
.Pp
.It Fl D
.It Fl -debug
Turn on debug output.
.Pp
.It Fl L
.It Fl -dereference
By default,
.Nm
ignores non-regular files including symlinks, but this switch makes it
resolve (dereference) each symlink using realpath(3) and edit the
original file.
.Pp
.It Fl b Ar SUFFIX
.It Fl -backup-suffix Ar SUFFIX
Create a backup file with the given suffix for each file.  Note that
backup files will be written over existing files, if any.
.Pp
.It Fl e Ar COMMANDLINE
.It Fl -execute Ar COMMANDLINE
Specify a filter command line to run for each file in which the following placeholders can be used:
.Bl -tag -offset indent -nested
.It Cm %0
replaced by the original file path, shell escaped with
.Pf \e 's
as necessary
.It Cm %1
replaced by the source file path, shell escaped with
.Pf \e 's
as necessary
.It Cm %2
replaced by the destination file path, shell escaped with
.Pf \e 's
as necessary
.It Cm %%
replaced by
.Ql %
.El
.Pp
Omission of %2 indicates %1 should be modified destructively, and
omission of both %1 and %2 implies
.Dq Li "(...) < %1 > %2"
around the command line.
.Pp
When the filter command is run, the destination file is always an
empty temporary file, and the source file is either the original file
or a temporary copy file.
.Pp
Every temporary file has the same suffix as the original file, so that
file name aware programs can play nicely with it.
.Pp
Instead of specifying a whole command line, you can use a command
alias defined in a configuration file,
.Pa ~/.inplace .
See the FILES section for the file format.
.Pp
This option can be specified many times, and they will be executed in
sequence.  A file is only replaced if all of them succeeds.
.Pp
See the EXAMPLES section below for details.
.Pp
.It Fl f
.It Fl -force
By default,
.Nm
does not perform editing if a file is not writable.  This switch makes
it force editing even if a file to process is read-only.
.Pp
.It Fl i
.It Fl -preserve-inode
Make sure to preserve the inode number of each file.
.Pp
.It Fl n
.It Fl -dry-run
Do not perform any destructive operation and just show what would have
been done.  This switch implies
.Fl v .
.Pp
.It Fl s
.It Fl -same-directory
Create a temporary file in the same directory as each replaced file.
This may speed up the performance when the directory in question is on
a partition that is fast enough and the system temporary directory is
slow.
.Pp
This switch can be effectively used when the temporary directory does
not have sufficient disk space for a resulted file.
.Pp
If this option is specified, edited files will have newly assigned
inode numbers.  To prevent this, use the
.Fl i
option.
.Pp
.It Fl t
.It Fl -preserve-timestamp
Preserve the access and modification times of each file.
.Pp
.It Fl v
.It Fl -verbose
Turn on verbose mode.
.Pp
.It Fl z
.It Fl -accept-empty
By default,
.Nm
does not replace the original file when a resulted file is empty in
size because it is likely that there is a mistake in the filter
command.  This switch makes it accept empty (zero-sized) output and
replace the original file with it.
.El
.Sh EXAMPLES
.Bl -bullet
.It
Sort files in-place using
.Xr sort 1 :
.Pp
.Dl inplace sort file1 file2 file3
.Pp
Below works the same as above, passing each input file via the command
line argument:
.Pp
.Dl inplace 'sort %1 > %2' file1 file2 file3
.Pp
.It
Perform in-place charset conversion and newline code conversion:
.Pp
.Dl inplace -e 'iconv -f EUC-JP -t UTF-8' -e 'perl -pe \&"s/$/\e\er/\&"' file1 file2 file3
.Pp
.It
Process image files taking backup files:
.Pp
.Dl inplace -b.orig 'convert -rotate 270 -resize 50%% %1 %2' *.jpg
.Pp
.It
Perform a mass MP3 tag modification without changing timestamps:
.Pp
.Dl find mp3/Some_Artist -name '*.mp3' -print0 | xargs -0 inplace -te 'mp3info -a \&"Some Artist\&" -g \&"Progressive Rock\&" %1'
.Pp
As you see above,
.Nm
makes a nice combo with
.Xr find 1
and
.Xr xargs 1 .
.Pp
.El
.Sh FILES
.Bl -tag -width "~/.inplace"
.It Pa ~/.inplace
The configuration file, which syntax is described as follows:
.Bl -bullet
.It
Each alias definition is a name/value pair separated with an
.Dq = ,
one per line.
.It
White spaces at the beginning or the end of a line, and around
assignment separators
.Pf ( Dq = )
are stripped off.
.It
Lines starting with a
.Dq #
are ignored.
.El
.El
.Sh ENVIRONMENT
.Bl -tag -width "TMPDIR" -compact
.It Ev TMPDIR
.It Ev TMP
.It Ev TEMP
Temporary directory candidates where
.Nm
attempts to create intermediate output files, in that order.  If none
is available and writable,
.Pa /tmp
is used.  If
.Fl s
is specified, they will not be used.
.El
.Sh SEE ALSO
.Xr find 1 ,
.Xr xargs 1 ,
.Xr realpath 3
.Sh AUTHORS
.An Akinori MUSHA Aq knu@iDaemons.org
.Sh BUGS
.Nm
cannot always preserve timestamps in full precision depending on the
ruby interpreter and the platform that
.Nm
runs on, that is, ruby 1.9 and later supports timestamps in
nanoseconds but setting file timestamps in nanosecond precision is
only possible if the platform supports
.Xr utimensat 2 .
.Pp
So, a problem can arise if the file system supports nanoseconds, like
ext4 and ZFS, but the platform does not have the system call to set
timestamps in nanoseconds, like Linux < 2.6.22, glibc < 2.6 and
.Fx ,
that the sub-microsecond part of a timestamp cannot be preserved.
